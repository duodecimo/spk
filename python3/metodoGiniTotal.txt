# Construí este código para conferir o cálculo do método
#  que chamei de gini total.
#  Não creio ser nescessário ter conhecimento da linguagem
#  Python e das rotinas da biblioteca Numpy, principalmente
#  a vetorização dos cálculos. Basta ler pulando os comandos:
#  basta ver os comentários e resultados.
# A matriz mensagens é um pequeno modelo dos dados de treino.
# Cada linha representa uma mensagem.
# A primeira coluna representa as respostas.
# Cada coluna subsequente representa uma palavra,
#  que existe (valor = 1) ou não (valor = 0) na mensagem.
mensagens:
[[1 0 1 1 0 0]
 [2 1 1 0 0 0]
 [3 1 0 0 1 1]
 [4 0 0 1 0 1]
 [1 0 1 1 0 0]
 [2 1 1 0 0 1]
 [1 1 1 1 0 0]]
confere!
# A quantidade de mensagens
q_mens = np.shape(mensagens)[0]
q_mens: 
7
confere!
# vetor de subtotais cada resposta
_, vet_sub_tot_resps = np.unique(mensagens[:, 0], return_counts=True
vet_sub_tot_resps: 
[3 2 1 1]
confere!
# a quantidade de respostas, nossas classes.
tot_resps = np.sum(vet_sub_tot_resps)
tot_resps: 
7
confere!
# Vetor de probabilidade de cada resposta | total de respostas
sum_probs_resps = np.power(vet_sub_tot_resps.astype(dtype=float) / tot_resps, 2)
#  (3÷7)^2=0,1837, (2÷7)^2=0,0816,(1÷7)^2=0,0204,(1÷7)^2=0,0204
sum_probs_resps: 
[ 0.18367347  0.08163265  0.02040816  0.02040816]
confere!
# Gini do conjunto de mensagens.
gini_mensagens = 1 - np.sum(sum_probs_resps)
gini_mensagens: 
0.69387755102
#  0,1837 + 0,0816 + 0,0204 + 0,0204=0,3061
#  1 - 0,3061=0,6939
confere!
# para cada palavra:
# com alguma resposta:
# cada palavra: total de cada resposta = 1.
respostas 1: 
 [[1 1 3 3 0 0]
 [2 2 2 0 0 1]
 [3 1 0 0 1 1]
 [4 0 0 1 0 1]]
confere!
# gini cada palavra com resposta: [(total de cada resposta = 1) / (total de respostas)] ** 2
gini_com_resposta = 1 - np.sum(np.power((out[:, 1:]).astype(dtype=float) / q_mens, 2), axis=0)
# primeira palavra: (palavras começam na segunda coluna.
#  (1÷7)²=0,0204
#  (2÷7)²=0,0816
#  (1÷7)²=0,0204
#  (0÷7)²=0
#  0,0204+0,0816+0,0204+0=0,1224
#  1−0,1224=0,8776
# mesmo calculo para as outras palavras
gini com resposta: 
 [ 0.87755102  0.73469388  0.79591837  0.97959184  0.93877551]
confere!
# sem resposta (o valor para a resposta é 0.
# troca zeros por um e vice versa nos valores, (att: danifica potencialmente a coluna de respostas)
# restaura a coluna de respostas.
# subtotais de cada resposta.
# cada palavra: total de cada resposta = 0.
respostas 0: 
 [[1 2 0 0 3 3]
 [2 0 0 2 2 1]
 [3 0 1 1 0 0]
 [4 1 1 0 1 0]]
# é só observar que vai ser o complemento das respostas 1.
# ou seja, nomero de respostas - numero de respostas 1.
confere!
# gini cada palavra com resposta: [(total de cada resposta = 1) / (total de respostas)] ** 2
gini_sem_resposta = 1 - np.sum(np.power((out[:, 1:]).astype(dtype=float) / q_mens, 2), axis=0)
gini sem resposta: 
 [ 0.89795918  0.95918367  0.89795918  0.71428571  0.79591837]
# conferindo a primeira palavra (segunda coluna)
#  (2÷7)²=0,0816
#  (0÷7)²=0
#  (0÷7)²=0
#  (1÷7)²=0,0204
#  0,0816+0+0+0,0204=0,102
#  1−0,102=0,898
confere!
# obter a média ponderada.
qmp1 = (mensagens[:, 1:] == 1.0).sum(axis=0, dtype=float)
qmp1
[ 4.  5.  4.  1.  3.]
# é só observar na matriz.
confere!
qmp0 = (mensagens[:, 1:] == 0.0).sum(axis=0, dtype=float)
qmp0
# é o complemento do tamanho (7) com qmp1
[ 3.  2.  3.  6.  4.]
confere!
g1 = np.column_stack((gini_com_resposta, gini_sem_resposta))
[[ 0.87755102  0.89795918]
 [ 0.73469388  0.95918367]
 [ 0.79591837  0.89795918]
 [ 0.97959184  0.71428571]
 [ 0.93877551  0.79591837]]
confere!
w = np.column_stack((qmp1, qmp0))
w: 
[[ 4.  3.]
 [ 5.  2.]
 [ 4.  3.]
 [ 1.  6.]
 [ 3.  4.]]
confere!
np.average(g1, axis=1, weights=w)
[ 0.88629738  0.79883382  0.83965015  0.75218659  0.85714286]
# Não confere: está dando valor negativo!!!!
# tentando inverter a média (1 - ...)
gini_palavras = gini_mensagens - (1 - np.average(g1, axis=1, weights=w))
confere!
gini palavras: 
 [ 0.58017493  0.49271137  0.5335277   0.44606414  0.55102041]
# para usar o menor gini
indice_melhor_palavra1 = np.argmin(gini_palavras)
indice_melhor_palavra1 (minimo): 
3
# para usar o maior gini: Esse é o que foi utilizado no programa.
indice_melhor_palavra2 = np.argmax(gini_palavras)
indice_melhor_palavra2
0
# Fim da rotina.
